{"version":3,"sources":["features/todoSlice.js","components/Input/index.js","components/ListTodo/index.js","components/Navbar/index.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["todoSlice","createSlice","name","initialState","todoList","reducers","saveTodo","state","action","push","payload","removeTodo","filter","item","id","editTodo","itemIndex","findIndex","map","index","input","setCheck","done","actions","selectTodoList","todos","useStyles","makeStyles","inputContainer","display","alignItems","justifyContent","padding","Input","classes","useState","setInput","dispatch","useDispatch","className","TextField","required","color","label","value","variant","onChange","e","target","IconButton","aria-label","onClick","Date","now","xmlns","width","height","viewBox","d","theme","checked","textDecoration","listTodo","listItem","borderBottom","backgroundColor","ListTodo","bool","setBool","text","setText","useEffect","ListItem","ListItemIcon","Checkbox","edge","tabIndex","disableRipple","InputProps","readOnly","root","flexGrow","menuButton","marginRight","spacing","title","textAlign","Navbar","AppBar","position","Toolbar","Typography","paddingBottom","container","margin","list","maxWidth","App","useSelector","List","combineReducers","persistConfig","key","storage","persistedReducer","persistReducer","store","configureStore","reducer","devTools","process","middleware","thunk","Boolean","window","location","hostname","match","persistor","persistStore","ReactDOM","render","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.03671802.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    todoList: []\r\n}\r\n\r\nconst todoSlice = createSlice({\r\n    name: 'todos',\r\n    initialState,\r\n    reducers: {\r\n        saveTodo : (state, action) => {\r\n            state.todoList.push(action.payload)\r\n        },\r\n        removeTodo: (state, action) => {\r\n            return {\r\n                todoList : [\r\n                    ...state.todoList.filter(item => item.id !== action.payload)\r\n                ]\r\n            }\r\n        },\r\n        editTodo :  (state, action) => {\r\n            const itemIndex = state.todoList.findIndex(item => item.id === action.payload.id)\r\n            state.todoList.map((item, index) => {\r\n                if(action.payload.id === item.id){\r\n                    if(index === itemIndex){\r\n                        item.input = action.payload.input\r\n                    }\r\n                }\r\n                return item\r\n            })\r\n        },\r\n        setCheck: (state, action) => {\r\n            state.todoList.map(item => {\r\n                if(action.payload === item.id){\r\n                    item.done = !item.done\r\n                }\r\n                return item\r\n            })\r\n        }\r\n    }\r\n});\r\n\r\nexport const {\r\n    saveTodo,\r\n    removeTodo,\r\n    editTodo,\r\n    setCheck\r\n} = todoSlice.actions\r\n\r\nexport const selectTodoList = state => state.todos.todoList\r\n\r\nexport default todoSlice.reducer","import React, { useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { TextField, IconButton } from \"@material-ui/core\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { saveTodo } from \"../../features/todoSlice\";\r\n\r\nconst useStyles = makeStyles({\r\n    inputContainer : {\r\n        display: 'flex',\r\n        alignItems : \"center\",\r\n        justifyContent : 'center',\r\n        padding : '0.5rem'\r\n    }\r\n})\r\n\r\nfunction Input() {\r\n    const classes = useStyles()\r\n  const [input, setInput] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n\r\n  const todo = () => {\r\n    if (input === \"\") {\r\n      return;\r\n    }\r\n    dispatch(\r\n      saveTodo({\r\n        input: input,\r\n        done: false,\r\n        id: Date.now(),\r\n      })\r\n    );\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className={classes.inputContainer}>\r\n      <TextField\r\n        required\r\n        color=\"secondary\"\r\n        id=\"outlined-required\"\r\n        label=\"Add Todo\"\r\n        value={input}\r\n        variant=\"outlined\"\r\n        className=\"input\"\r\n        onChange={(e) => setInput(e.target.value)}\r\n      />\r\n      <IconButton aria-label=\"add\" onClick={todo}>\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width=\"24\"\r\n          height=\"24\"\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <path d=\"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\" />\r\n        </svg>\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport { removeTodo, editTodo, setCheck } from \"../../features/todoSlice\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  checked: {\r\n    textDecoration: \"line-through\",\r\n  },\r\n  listTodo: {\r\n    textDecoration: \"none\",\r\n  },\r\n  listItem: {\r\n    borderBottom: \"1px solid skyblue\",\r\n    padding: \"10px\",\r\n    backgroundColor: \"#E8EAF6\",\r\n  },\r\n}));\r\n\r\nfunction ListTodo({ input, checked, id }) {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const [bool, setBool] = useState(true);\r\n  const [text, setText] = useState(input);\r\n\r\n  useEffect(() => {\r\n    setText(input);\r\n  }, [input]);\r\n\r\n  const handleChange = () => {\r\n    dispatch(setCheck(id));\r\n  };\r\n\r\n  const deleteTodo = () => {\r\n    dispatch(removeTodo(id));\r\n  };\r\n\r\n  const editTodos = () => {\r\n    if (bool) {\r\n      return setBool(false);\r\n    }\r\n    setBool(true);\r\n    dispatch(editTodo({ id, input: text }));\r\n  };\r\n\r\n  return (\r\n    <ListItem className={classes.listItem}>\r\n      <ListItemIcon>\r\n        <Checkbox\r\n          edge=\"start\"\r\n          checked={checked}\r\n          tabIndex={-1}\r\n          disableRipple\r\n          onClick={handleChange}\r\n        />\r\n      </ListItemIcon>\r\n      <TextField\r\n        id=\"standard-read-only-input\"\r\n        label={bool ? \"Read Only\" : \"Editing\"}\r\n        value={text}\r\n        InputProps={{\r\n          readOnly: bool,\r\n        }}\r\n        color=\"secondary\"\r\n        variant=\"outlined\"\r\n        className={checked ? classes.checked : classes.listTodo}\r\n        onChange={(e) => setText(e.target.value)}\r\n      />\r\n      <IconButton aria-label=\"edit\" onClick={editTodos}>\r\n        {bool ? <EditIcon /> : <CheckBoxIcon />}\r\n      </IconButton>\r\n      <IconButton aria-label=\"delete\" onClick={deleteTodo}>\r\n        <DeleteIcon />\r\n      </IconButton>\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nexport default ListTodo;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    textAlign: \"center\",\r\n  },\r\n}));\r\n\r\nexport default function Navbar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar color=\"secondary\" position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Todo App\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Input from \"./components/Input\";\r\nimport ListTodo from \"./components/ListTodo\";\r\nimport Navbar from \"./components/Navbar\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectTodoList } from \"./features/todoSlice\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    paddingBottom: \"1rem\",\r\n  },\r\n  container: {\r\n    margin: \"0.7rem\",\r\n  },\r\n  list: {\r\n    width: \"100%\",\r\n    maxWidth: 360,\r\n    margin: \"1rem auto\",\r\n  },\r\n});\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const todoList = useSelector(selectTodoList);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Navbar />\r\n      <Input />\r\n      <div className={classes.container}>\r\n        <List className={classes.list}>\r\n          {todoList.map((item, index) => (\r\n            <ListTodo\r\n              key={index}\r\n              input={item.input}\r\n              checked={item.done}\r\n              id={item.id}\r\n            />\r\n          ))}\r\n        </List>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\nimport { combineReducers } from \"redux\";\r\nimport { persistReducer } from \"redux-persist\";\r\nimport thunk from \"redux-thunk\";\r\nimport todoSlice from \"../features/todoSlice\";\r\n\r\nconst reducers = combineReducers({\r\n  todos: todoSlice,\r\n});\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, reducers);\r\n\r\nexport const store = configureStore({\r\n  reducer: persistedReducer,\r\n  devTools: process.env.NODE_ENV !== \"production\",\r\n  middleware: [thunk],\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport { persistStore } from 'redux-persist';\r\n\r\nlet persistor = persistStore(store);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <PersistGate loading={null} persistor={persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}